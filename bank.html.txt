<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Banking Demo — Singleton BankServer</title>
  <style>
    :root{font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial;--bg:#f4f7fb;--card:#fff;--accent:#2563eb;--muted:#6b7280}
    body{margin:0;background:var(--bg);color:#111}
    .container{max-width:960px;margin:32px auto;padding:20px}
    header{display:flex;align-items:center;gap:16px}
    h1{margin:0;font-size:1.4rem}
    .grid{display:grid;grid-template-columns:1fr 360px;gap:20px;margin-top:18px}
    .card{background:var(--card);padding:16px;border-radius:12px;box-shadow:0 6px 18px rgba(15,23,42,0.06)}
    label{display:block;font-size:0.85rem;color:var(--muted);margin-bottom:6px}
    input,select,button{width:100%;padding:10px;border-radius:8px;border:1px solid #e6edf7;font-size:0.95rem}
    button{background:var(--accent);color:white;border:none;cursor:pointer}
    .muted{color:var(--muted);font-size:0.9rem}
    .small{font-size:0.85rem}
    ul.accounts{list-style:none;padding:0;margin:0;display:flex;flex-direction:column;gap:8px}
    ul.accounts li{display:flex;justify-content:space-between;align-items:center;padding:8px 10px;border-radius:8px;background:#fbfdff}
    .tx-list{max-height:300px;overflow:auto}
    .tx{display:flex;justify-content:space-between;padding:8px;border-bottom:1px dashed #eef4ff}
    .success{color:green}
    .danger{color:#b91c1c}
    footer{margin-top:18px;text-align:center;color:var(--muted);font-size:0.85rem}
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="logo card" style="padding:10px 14px;border-radius:10px"><strong>Bank Demo</strong></div>
      <div>
        <h1>Banking UI — Singleton BankServer</h1>
        <div class="muted small">A single BankServer instance manages all accounts and transactions (Singleton pattern).</div>
      </div>
    </header>

    <div class="grid">
      <main class="card">
        <section>
          <h3 style="margin:0 0 8px 0">Create Account</h3>
          <div style="display:flex;gap:10px">
            <input id="newName" placeholder="Account holder name" />
            <button id="createBtn">Create</button>
          </div>
        </section>

        <section style="margin-top:14px">
          <h3 style="margin:0 0 8px 0">Actions</h3>
          <div style="display:grid;grid-template-columns:1fr 1fr;gap:8px">
            <div>
              <label for="from">From (account)</label>
              <select id="from"></select>
            </div>
            <div>
              <label for="to">To (account)</label>
              <select id="to"></select>
            </div>
            <div>
              <label for="amount">Amount</label>
              <input id="amount" type="number" min="0" placeholder="e.g. 1000" />
            </div>
            <div style="display:flex;flex-direction:column;gap:6px;">
              <button id="deposit">Deposit</button>
              <button id="withdraw">Withdraw</button>
              <button id="transfer">Transfer</button>
            </div>
          </div>
        </section>

        <section style="margin-top:14px">
          <h3 style="margin:0 0 8px 0">Transactions</h3>
          <div id="txArea" class="tx-list"></div>
        </section>
      </main>

      <aside>
        <div class="card">
          <h3 style="margin:0 0 10px 0">Accounts</h3>
          <ul id="accounts" class="accounts"></ul>
        </div>

        <div class="card" style="margin-top:12px">
          <h3 style="margin:0 0 10px 0">Selected Account</h3>
          <div id="selected" class="muted">No account selected</div>
        </div>
      </aside>
    </div>

    <footer class="muted">Save this file as <code>index.html</code> and open in your browser.</footer>
  </div>

  <script>
    // =============================
    // BankServer: Singleton pattern
    // =============================

    // Create a private lock token using a Symbol — only code that has access to this token
    // can call the constructor. This emulates a private constructor in JS.
    const PRIVATE_CONSTRUCTOR_LOCK = Symbol('PRIVATE_CONSTRUCTOR_LOCK');

    class BankServer {
      static #instance = null; // private static field holds the singleton

      // constructor is "private" because it requires the lock token
      constructor(lock) {
        if (lock !== PRIVATE_CONSTRUCTOR_LOCK) {
          throw new Error('BankServer constructor is private. Use BankServer.getInstance()');
        }

        // internal state
        this.nextId = 1;
        this.accounts = new Map(); // id -> {id, name, balance}
        this.transactions = []; // {time, type, from, to, amount, message}
      }

      // public static accessor for the single instance
      static getInstance() {
        if (!BankServer.#instance) {
          BankServer.#instance = new BankServer(PRIVATE_CONSTRUCTOR_LOCK);
        }
        return BankServer.#instance;
      }

      // create a new account
      createAccount(name) {
        const id = this.nextId++;
        const acct = { id: id.toString(), name: name || `Account ${id}`, balance: 0 };
        this.accounts.set(acct.id, acct);
        this._pushTx({ type: 'create', to: acct.id, amount: 0, message: `Created account ${acct.name}` });
        return acct;
      }

      // deposit
      deposit(accountId, amount) {
        amount = Number(amount);
        this._assertAccount(accountId);
        if (amount <= 0) throw new Error('Deposit amount must be > 0');
        const acct = this.accounts.get(accountId);
        acct.balance += amount;
        this._pushTx({ type: 'deposit', to: accountId, amount, message: `Deposit to ${acct.name}` });
        return acct.balance;
      }

      // withdraw
      withdraw(accountId, amount) {
        amount = Number(amount);
        this._assertAccount(accountId);
        const acct = this.accounts.get(accountId);
        if (amount <= 0) throw new Error('Withdraw amount must be > 0');
        if (acct.balance < amount) throw new Error('Insufficient funds');
        acct.balance -= amount;
        this._pushTx({ type: 'withdraw', from: accountId, amount, message: `Withdraw from ${acct.name}` });
        return acct.balance;
      }

      // transfer
      transfer(fromId, toId, amount) {
        amount = Number(amount);
        this._assertAccount(fromId);
        this._assertAccount(toId);
        if (fromId === toId) throw new Error('Cannot transfer to same account');
        const from = this.accounts.get(fromId);
        const to = this.accounts.get(toId);
        if (amount <= 0) throw new Error('Transfer amount must be > 0');
        if (from.balance < amount) throw new Error('Insufficient funds');
        from.balance -= amount;
        to.balance += amount;
        this._pushTx({ type: 'transfer', from: fromId, to: toId, amount, message: `Transfer ${amount} from ${from.name} to ${to.name}` });
      }

      getAccounts() {
        // return shallow copies
        return Array.from(this.accounts.values()).map(a => ({ ...a }));
      }

      getTransactions(limit = 100) {
        return this.transactions.slice(-limit).reverse();
      }

      getAccount(id) {
        this._assertAccount(id);
        return { ...this.accounts.get(id) };
      }

      // internal helpers
      _pushTx(tx) {
        this.transactions.push({ time: new Date().toISOString(), ...tx });
        // keep size reasonable
        if (this.transactions.length > 1000) this.transactions.shift();
      }

      _assertAccount(id) {
        if (!this.accounts.has(id)) throw new Error('Account not found: ' + id);
      }
    }

    // =============================
    // UI glue — uses the singleton
    // =============================
    const bank = BankServer.getInstance();

    // DOM elements
    const accountsList = document.getElementById('accounts');
    const createBtn = document.getElementById('createBtn');
    const newName = document.getElementById('newName');
    const fromSelect = document.getElementById('from');
    const toSelect = document.getElementById('to');
    const amountInput = document.getElementById('amount');
    const depositBtn = document.getElementById('deposit');
    const withdrawBtn = document.getElementById('withdraw');
    const transferBtn = document.getElementById('transfer');
    const txArea = document.getElementById('txArea');
    const selectedDiv = document.getElementById('selected');

    // sample demo accounts (only if empty)
    if (bank.getAccounts().length === 0) {
      bank.createAccount('Alice');
      bank.createAccount('Bob');
      bank.deposit('1', 5000);
      bank.deposit('2', 3000);
    }

    function renderAccounts() {
      const list = bank.getAccounts();
      accountsList.innerHTML = '';
      fromSelect.innerHTML = '';
      toSelect.innerHTML = '';
      for (const acct of list) {
        const li = document.createElement('li');
        li.innerHTML = `<div><strong>${acct.name}</strong><div class=small>Id: ${acct.id}</div></div><div><div class=muted>${acct.balance.toFixed(2)}</div></div>`;
        li.onclick = () => { selectAccount(acct.id); };
        accountsList.appendChild(li);

        const opt1 = document.createElement('option'); opt1.value = acct.id; opt1.text = `${acct.name} (${acct.id})`;
        const opt2 = document.createElement('option'); opt2.value = acct.id; opt2.text = `${acct.name} (${acct.id})`;
        fromSelect.appendChild(opt1);
        toSelect.appendChild(opt2);
      }

      renderTransactions();
    }

    function renderTransactions() {
      const txs = bank.getTransactions(200);
      txArea.innerHTML = '';
      if (txs.length === 0) txArea.innerHTML = '<div class="muted">No transactions yet</div>';
      for (const t of txs) {
        const el = document.createElement('div');
        el.className = 'tx';
        el.innerHTML = `<div><div style="font-size:0.9rem">${t.message}</div><div class="small muted">${new Date(t.time).toLocaleString()}</div></div><div style="text-align:right"><div>${t.amount ? t.amount.toFixed(2) : ''}</div><div class="small muted">${t.type}</div></div>`;
        txArea.appendChild(el);
      }
    }

    function selectAccount(id) {
      try {
        const a = bank.getAccount(id);
        selectedDiv.innerHTML = `<strong>${a.name}</strong><div class='small muted'>Id: ${a.id}</div><div style='margin-top:6px'>Balance: <strong>${a.balance.toFixed(2)}</strong></div>`;
      } catch (e) {
        selectedDiv.textContent = 'No account selected';
      }
    }

    // event handlers
    createBtn.onclick = () => {
      const name = newName.value.trim() || null;
      try {
        const acct = bank.createAccount(name);
        newName.value = '';
        renderAccounts();
        selectAccount(acct.id);
      } catch (e) { alert(e.message); }
    };

    depositBtn.onclick = () => {
      const id = fromSelect.value;
      const amt = Number(amountInput.value);
      try {
        bank.deposit(id, amt);
        renderAccounts();
        selectAccount(id);
        amountInput.value = '';
      } catch (e) { alert(e.message); }
    };

    withdrawBtn.onclick = () => {
      const id = fromSelect.value;
      const amt = Number(amountInput.value);
      try {
        bank.withdraw(id, amt);
        renderAccounts();
        selectAccount(id);
        amountInput.value = '';
      } catch (e) { alert(e.message); }
    };

    transferBtn.onclick = () => {
      const from = fromSelect.value;
      const to = toSelect.value;
      const amt = Number(amountInput.value);
      try {
        bank.transfer(from, to, amt);
        renderAccounts();
        selectAccount(from);
        amountInput.value = '';
      } catch (e) { alert(e.message); }
    };

    // initial render
    renderAccounts();
    // select first
    if (fromSelect.options.length) selectAccount(fromSelect.options[0].value);

    // Expose bank to window for debugging (only in demo)
    window._bank = bank;
  </script>
</body>
</html>
